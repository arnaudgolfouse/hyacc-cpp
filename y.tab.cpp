
# line 1 "test_c.y"

/* tokens */

#define 0x604000000160257
#define 0x6040000001a0258
#define 0x6040000001e0259
#define 0x604000000220260
#define 0x604000000260261
#define 0x6040000002a0262
#define 0x6040000002e0263
#define 0x604000000320264
#define 0x604000000360265
#define 0x6040000003a0266
#define 0x6040000003e0267
#define 0x604000000420268
#define 0x604000000460269
#define 0x6040000004a0270
#define 0x6040000004e0271
#define 0x604000000520272
#define 0x604000000560273
#define 0x6040000005a0274
#define 0x6040000005e0275
#define 0x604000000620276
#define 0x604000000660277
#define 0x6040000006a0278
#define 0x6040000006e0279
#define 0x604000000720280
#define 0x604000000760281
#define 0x6040000007a0282
#define 0x6040000007e0283
#define 0x604000000820284
#define 0x604000000860285
#define 0x6040000008a0286
#define 0x6040000008e0287
#define 0x604000000920288
#define 0x604000000960289
#define 0x6040000009a0290
#define 0x6040000009e0291
#define 0x604000000a20292
#define 0x604000000a60293
#define 0x604000000aa0294
#define 0x604000000ae0295
#define 0x604000000b20296
#define 0x604000000b60297
#define 0x604000000ba0298
#define 0x604000000be0299
#define 0x604000000c20300
#define 0x604000000c60301
#define 0x604000000ca0302
#define 0x604000000ce0303
#define 0x604000000d20304
#define 0x604000000d60305
#define 0x604000000da0306
#define 0x604000000de0307
#define 0x604000000e20308
#define 0x604000000e60309
#define 0x604000000ea0310
#define 0x604000000ee0311
#define 0x604000000f20312
#define 0x604000000f60313
#define 0x604000000fa0314
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
#define YYSTYPE_IS_DECLARED 1
#endif

YYSTYPE yylval;

# line 417 "test_c.y"

#include <stdio.h>

extern char yytext[];
extern int column;

yyerror(s)
char *s;
{
	fflush(stdout);
	pri
#define YYCONST const
typedef int yytabelem;

static YYCONST yytabelem yyfs[] = {
0, 0, 204, 206, 207, 0, 0, 0, 0, 0, 
0, 0, 87, 88, 89, 90, 91, 92, 93, 94, 
95, 96, 97, 98, 99, 100, 101, 102, 103, 128, 
129, 0, 132, 0, 0, 0, 107, 108, 205, 75, 
0, 0, 83, 211, 0, 0, 186, 0, 78, 80, 
82, 0, 0, 0, 141, 0, 143, 0, 0, 0, 
0, 0, 76, 0, 209, 0, 0, 187, 210, 0, 
0, 182, 188, 173, 174, 175, 176, 177, 178, 0, 
0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 72, 59, 0, 0, 0, 0, 0, 
0, 0, 0, 5, 21, 22, 23, 24, 25, 26, 
0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 
0, 29, 0, 138, 0, 0, 152, 0, 147, 0, 
135, 0, 74, 27, 1, 142, 144, 133, 0, 0, 
109, 0, 0, 0, 0, 0, 124, 0, 84, 208, 
86, 168, 0, 0, 184, 183, 189, 0, 0, 0, 
0, 191, 0, 0, 0, 0, 0, 0, 200, 201, 
202, 0, 0, 61, 62, 63, 64, 65, 66, 67, 
68, 69, 70, 71, 0, 0, 0, 0, 12, 11, 
0, 0, 16, 0, 17, 18, 0, 19, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 
136, 0, 150, 149, 0, 0, 0, 0, 134, 0, 
110, 105, 0, 116, 0, 0, 112, 114, 0, 121, 
0, 0, 0, 171, 185, 179, 0, 181, 73, 0, 
0, 0, 0, 0, 199, 203, 60, 0, 0, 7, 
0, 13, 9, 10, 0, 0, 0, 0, 0, 4, 
155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 32, 30, 31, 153, 148, 
146, 0, 0, 0, 164, 0, 0, 160, 0, 104, 
111, 0, 0, 119, 122, 125, 127, 0, 169, 180, 
0, 0, 0, 0, 0, 0, 0, 8, 6, 20, 
28, 166, 0, 162, 0, 159, 165, 161, 117, 120, 
170, 172, 192, 194, 195, 0, 0, 0, 58, 14, 
167, 163, 0, 0, 197, 0, 193, 196, 198};

static YYCONST yytabelem yyptbltok[] = {
257, 40, 42, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, -22, -23, -26, -27, -28, -29, -35, 
-38, -39, -40, -41, -61, -62, -63, 0, 257, 40, 
42, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, -22, -23, -26, -27, -28, -29, -35, -38, -39, 
-40, -41, -62, -63, 0, 257, 40, 42, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 299, 300, 301, 296, 297, 0, 257, 
40, 42, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, 0, 257, 40, 42, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 299, 300, 301, 296, 297, 257, 40, 42, 59, 
-24, -25, -39, -40, -41, 283, 284, 285, 286, 287, 
298, 288, 289, 290, 291, 294, 295, 292, 293, 282, 
123, 299, 300, 301, 296, 297, -22, -23, -26, -27, 
-28, -29, -35, -38, -54, -55, 257, 40, 41, 91, 
44, 42, 59, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, -23, -26, -27, -28, -29, -35, -38, 
257, 40, 41, 91, 44, 42, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 299, 300, 301, 296, 297, -23, -26, -27, 
-28, -29, -35, -38, 257, 40, 41, 91, 44, 42, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, -23, -26, -27, -28, -29, -35, -38, 257, 40, 
-40, 40, 41, 91, 44, 58, 61, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 123, 299, 300, 301, 296, 297, 257, 
40, 41, 91, 44, 42, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 299, 300, 301, 296, 297, 257, 40, 41, 91, 
44, 42, 59, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, 257, 40, 41, 91, 44, 42, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
257, 40, 41, 91, 44, 42, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 299, 300, 301, 296, 297, 257, 40, 41, 
91, 44, 42, 59, 283, 284, 285, 286, 287, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 299, 
300, 301, 296, 297, 257, 40, 41, 91, 44, 42, 
58, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, 257, 40, 41, 91, 44, 42, 58, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
257, 40, 41, 91, 44, 42, 58, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 299, 300, 301, 296, 297, 257, 40, 
41, 91, 44, 42, 58, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 299, 300, 301, 296, 297, 257, 40, 41, 91, 
44, 42, 58, 59, 283, 284, 285, 286, 287, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 299, 
300, 301, 296, 297, 257, 40, 41, 91, 44, 42, 
58, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, 257, 40, 41, 91, 44, 42, 58, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
257, 40, 41, 91, 44, 42, 58, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 299, 300, 301, 296, 297, 257, 40, 
41, 91, 44, 42, 58, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 299, 300, 301, 296, 297, 257, 40, 41, 91, 
44, 42, 58, 59, 283, 284, 285, 286, 287, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 299, 
300, 301, 296, 297, 257, 40, 41, 91, 44, 42, 
58, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, 257, 40, 41, 91, 44, 42, 58, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
257, 40, 41, 91, 44, 42, 58, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 299, 300, 301, 296, 297, 257, 40, 
41, 91, 44, 42, 58, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 299, 300, 301, 296, 297, 257, 40, 41, 91, 
44, 42, 296, 297, -38, -41, -42, 40, 41, 91, 
44, 58, 61, 59, 283, 284, 285, 286, 287, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 123, 
299, 300, 301, 296, 297, 257, 40, 42, -39, -40, 
-41, 257, 123, 257, 123, 257, 123, 257, 123, 0, 
257, 40, 42, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, 0, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 123, 125, 299, 300, 301, 296, 297, 
303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 
314, 44, 59, 44, 61, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 123, 299, 300, 301, 296, 297, -22, -23, -26, 
-27, -28, -29, -35, -38, -54, -55, 44, 59, 0, 
257, 40, 42, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 123, 299, 
300, 301, 296, 297, -22, -23, -26, -27, -28, -29, 
-35, -38, -54, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 123, 125, 299, 300, 301, 296, 297, 303, 
304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, -13, -14, -15, -16, -17, -18, -20, -22, -23, 
-26, -27, -28, -29, -35, -38, -52, -53, -54, -55, 
-56, -57, -58, -59, -60, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 283, 
284, 285, 286, 287, 298, 288, 289, 290, 291, 294, 
295, 292, 293, 282, 123, 125, 299, 300, 301, 296, 
297, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, 257, 40, 42, 59, -24, -25, -39, -40, 
-41, 257, 40, 41, 91, 44, 42, 59, 257, 40, 
41, 91, 44, 42, 59, 257, 40, 41, 91, 44, 
42, 59, 40, 41, 91, 44, 58, 61, 59, 283, 
284, 285, 286, 287, 298, 288, 289, 290, 291, 294, 
295, 292, 293, 282, 123, 299, 300, 301, 296, 297, 
257, 41, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, -23, -26, -27, -28, -29, -35, -38, -43, 
-44, -45, -46, 257, 258, 259, 40, 93, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -21, 257, 40, 41, 91, 44, 257, 
40, 41, 91, 44, 42, 296, 297, -38, -41, 257, 
40, 41, 91, 44, 42, 296, 297, 41, 257, 40, 
41, 91, 44, 42, 58, 59, 283, 284, 285, 286, 
287, 298, 288, 289, 290, 291, 294, 295, 292, 293, 
282, 123, 299, 300, 301, 296, 297, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 299, 300, 301, 
296, 297, -27, -28, -29, -30, -31, -32, -35, -38, 
257, 40, 41, 91, 44, 42, 58, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 123, 299, 300, 301, 296, 297, 257, 
-36, -37, 0, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 123, 125, 299, 300, 301, 296, 297, 303, 
304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 
257, 40, 42, -25, -39, -40, -41, 0, 257, 40, 
42, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 123, 299, 300, 301, 
296, 297, -22, -23, -26, -27, -28, -29, -35, -38, 
-54, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 123, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, 
-17, -18, -50, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 123, 125, 299, 300, 301, 296, 297, 303, 
304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 
0, 257, 40, 42, 283, 284, 285, 286, 287, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 299, 
300, 301, 296, 297, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 59, 283, 284, 
285, 286, 287, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 123, 125, 299, 300, 301, 296, 297, 
303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 
314, -1, -2, -4, -5, -6, -7, -8, -9, -10, 
-11, -12, -13, -14, -15, -16, -17, -18, -20, -22, 
-23, -26, -27, -28, -29, -35, -38, -52, -53, -54, 
-56, -57, -58, -59, -60, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, -1, -2, -4, -5, -6, -7, -8, -9, 
-10, -11, -12, -13, -14, -15, -16, -17, -18, -20, 
-52, -53, -54, -57, -58, -59, -60, 0, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 123, 125, 299, 
300, 301, 296, 297, 303, 304, 305, 306, 307, 308, 
309, 310, 311, 312, 313, 314, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 59, 
123, 125, 303, 304, 305, 307, 308, 309, 310, 311, 
312, 313, 314, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 123, 125, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 
314, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 59, 123, 125, 303, 304, 305, 
306, 307, 308, 309, 310, 311, 312, 313, 314, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, 59, 123, 125, 303, 304, 305, 306, 307, 
308, 309, 310, 311, 312, 313, 314, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 123, 125, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 306, 307, 308, 309, 310, 311, 
312, 313, 314, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 123, 125, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 
314, 40, 91, 46, 261, 262, 263, 44, 38, 42, 
43, 45, 47, 37, 264, 265, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 61, 272, 
273, 274, 275, 276, 277, 278, 279, 280, 281, 59, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, -1, -2, -4, -5, -6, -7, -8, 
-9, -10, -11, -12, -13, -14, -15, -16, -17, -21, 
58, 257, 258, 259, 40, 41, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 59, 123, 125, 303, 304, 
305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 
44, 59, 40, 40, 40, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 
314, -1, -2, -4, -5, -6, -7, -8, -9, -10, 
-11, -12, -13, -14, -15, -16, -17, -18, -20, -52, 
-53, -54, -57, -58, -59, -60, 40, 257, 59, 59, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, 59, -1, -2, -4, -5, -6, -7, 
-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, 
-18, -20, 41, 93, 44, 58, 59, 41, 93, 44, 
58, 59, 125, 41, 93, 44, 38, 42, 43, 45, 
47, 37, 264, 265, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 61, 272, 273, 274, 
275, 276, 277, 278, 279, 280, 281, 59, 125, -19, 
41, 93, 44, 271, 63, 58, 59, 125, 40, 41, 
91, 93, 46, 261, 262, 263, 44, 38, 42, 43, 
45, 47, 37, 264, 265, 60, 62, 266, 267, 268, 
269, 94, 124, 270, 271, 63, 58, 61, 272, 273, 
274, 275, 276, 277, 278, 279, 280, 281, 59, 125, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, -1, -2, -4, -5, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
-1, -2, -4, -5, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, 41, 
93, 44, 270, 271, 63, 58, 59, 125, 40, 41, 
91, 93, 46, 261, 262, 263, 44, 38, 42, 43, 
45, 47, 37, 264, 265, 60, 62, 266, 267, 268, 
269, 94, 124, 270, 271, 63, 58, 61, 272, 273, 
274, 275, 276, 277, 278, 279, 280, 281, 59, 125, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 41, 93, 
44, 124, 270, 271, 63, 58, 59, 125, 40, 41, 
91, 93, 46, 261, 262, 263, 44, 38, 42, 43, 
45, 47, 37, 264, 265, 60, 62, 266, 267, 268, 
269, 94, 124, 270, 271, 63, 58, 61, 272, 273, 
274, 275, 276, 277, 278, 279, 280, 281, 59, 125, 
40, 41, 91, 93, 46, 261, 262, 263, 44, 38, 
42, 43, 45, 47, 37, 264, 265, 60, 62, 266, 
267, 268, 269, 94, 124, 270, 271, 63, 58, 61, 
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 
59, 125, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, -13, -14, -15, -16, -17, -18, -20, -27, -28, 
-29, -32, -35, -38, -47, 41, 93, 44, 94, 124, 
270, 271, 63, 58, 59, 125, 41, 93, 44, 38, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 59, 125, 
41, 93, 44, 38, 264, 265, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 59, 125, 
41, 93, 44, 38, 43, 45, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 59, 125, 41, 93, 44, 
38, 42, 43, 45, 47, 37, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 44, 61, 59, 40, 41, 91, 44, 58, 
61, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 123, 299, 300, 
301, 296, 297, 41, 44, 41, 41, 44, 41, 44, 
41, 44, 257, 40, 41, 91, 44, 42, -39, -40, 
-41, -48, -49, 40, 41, 91, 44, 58, 61, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 123, 299, 300, 301, 296, 
297, 93, 93, 44, 58, 59, 125, 41, 93, 44, 
38, 42, 43, 45, 47, 37, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
61, 272, 273, 274, 275, 276, 277, 278, 279, 280, 
281, 59, 125, 40, 41, 91, 93, 46, 261, 262, 
263, 44, 38, 42, 43, 45, 47, 37, 264, 265, 
60, 62, 266, 267, 268, 269, 94, 124, 270, 271, 
63, 58, 61, 272, 273, 274, 275, 276, 277, 278, 
279, 280, 281, 59, 125, 257, 40, 41, 91, 44, 
257, 40, 41, 91, 44, 42, 296, 297, 40, 41, 
91, 44, 58, 61, 59, 283, 284, 285, 286, 287, 
298, 288, 289, 290, 291, 294, 295, 292, 293, 282, 
123, 299, 300, 301, 296, 297, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, -27, -28, -29, -30, -31, -32, -35, -38, 298, 
288, 289, 290, 291, 294, 295, 292, 293, 282, 125, 
299, 300, 301, 296, 297, -27, -28, -29, -31, -32, 
-35, -38, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 125, 299, 300, 301, 296, 297, 257, 40, 
42, 58, -33, -34, -39, -40, -41, 257, 40, 41, 
91, 42, 58, 298, 288, 289, 290, 291, 294, 295, 
292, 293, 282, 299, 300, 301, 296, 297, -27, -28, 
-29, -32, -35, -38, 257, 40, 41, 91, 42, 58, 
298, 288, 289, 290, 291, 294, 295, 292, 293, 282, 
299, 300, 301, 296, 297, -27, -28, -29, -32, -35, 
-38, 257, -36, -37, 44, 125, 44, 125, 44, 61, 
125, 44, 59, 0, 257, 40, 42, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 299, 300, 301, 296, 297, 44, 59, 44, 
59, 125, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 123, -1, -2, -4, -5, 
-6, -7, -8, -9, -10, -11, -12, -13, -14, -15, 
-16, -17, -18, -50, -51, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, -1, -2, -4, -5, -6, -7, -8, -9, 
-10, -11, -12, -13, -14, -15, -16, -17, -18, -20, 
-52, -53, -54, -57, -58, -59, -60, 0, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 59, 283, 284, 285, 286, 287, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 123, 125, 299, 
300, 301, 296, 297, 303, 304, 305, 306, 307, 308, 
309, 310, 311, 312, 313, 314, 0, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 123, 125, 299, 300, 
301, 296, 297, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 59, 123, 303, 304, 305, 
307, 308, 309, 310, 311, 312, 313, 314, -1, -2, 
-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 
-14, -15, -16, -17, -18, -20, -52, -53, -54, -57, 
-58, -59, -60, 58, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 59, 123, 303, 
304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, -13, -14, -15, -16, -17, -18, -20, -52, -53, 
-54, -57, -58, -59, -60, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, -1, -2, 
-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 
-14, -15, -16, -17, -18, 257, 258, 259, 40, 41, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 59, 
123, 125, 303, 304, 305, 306, 307, 308, 309, 310, 
311, 312, 313, 314, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -18, -20, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, -1, -2, 
-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 
-14, -15, -16, -17, -18, -20, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, -1, 
-2, -4, -5, -6, -7, -8, -9, -10, -11, -12, 
-13, -14, -15, -16, -17, -18, -20, 308, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 59, -1, -2, -4, -5, -6, -7, -8, -9, 
-10, -11, -12, -13, -14, -15, -16, -17, -18, -20, 
-57, 59, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 59, 123, 125, 303, 304, 
305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, 59, 123, 125, 303, 304, 305, 306, 
307, 308, 309, 310, 311, 312, 313, 314, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 59, 123, 125, 303, 304, 305, 306, 307, 308, 
309, 310, 311, 312, 313, 314, 44, 59, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, -1, -2, -4, -5, -6, -7, -8, -9, -10, 
-11, -12, -13, -14, -15, -16, -17, -18, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, -1, -2, -4, -5, -6, -7, 
-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, 
-18, -20, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, 257, 
258, 259, 40, 41, 262, 263, 260, 38, 42, 43, 
45, 126, 33, -1, -2, -3, -4, -5, -6, -7, 
-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, 
-18, 257, 40, 41, 91, 93, 46, 261, 262, 263, 
44, 38, 42, 43, 45, 47, 37, 264, 265, 60, 
62, 266, 267, 268, 269, 94, 124, 270, 271, 63, 
58, 61, 272, 273, 274, 275, 276, 277, 278, 279, 
280, 281, 59, 125, 40, 41, 91, 93, 46, 261, 
262, 263, 44, 38, 42, 43, 45, 47, 37, 264, 
265, 60, 62, 266, 267, 268, 269, 94, 124, 270, 
271, 63, 58, 61, 272, 273, 274, 275, 276, 277, 
278, 279, 280, 281, 59, 125, 257, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, -13, -14, -15, -16, -17, -18, -20, 41, 93, 
44, 38, 42, 43, 45, 47, 37, 264, 265, 60, 
62, 266, 267, 268, 269, 94, 124, 270, 271, 63, 
58, 61, 272, 273, 274, 275, 276, 277, 278, 279, 
280, 281, 59, 125, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -18, -20, 41, 93, 44, 38, 42, 
43, 45, 47, 37, 264, 265, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 61, 272, 
273, 274, 275, 276, 277, 278, 279, 280, 281, 59, 
125, 41, 93, 44, 38, 42, 43, 45, 47, 37, 
264, 265, 60, 62, 266, 267, 268, 269, 94, 124, 
270, 271, 63, 58, 61, 272, 273, 274, 275, 276, 
277, 278, 279, 280, 281, 59, 125, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
298, 288, 289, 290, 291, 294, 295, 292, 293, 282, 
299, 300, 301, 296, 297, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, 
-17, -18, -20, -27, -28, -29, -32, -35, -38, -47, 
41, 93, 44, 38, 42, 43, 45, 47, 37, 264, 
265, 60, 62, 266, 267, 268, 269, 94, 124, 270, 
271, 63, 58, 61, 272, 273, 274, 275, 276, 277, 
278, 279, 280, 281, 59, 125, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, -1, 
-2, -4, -5, -6, -7, -8, -9, -10, -11, -12, 
-13, -14, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, 41, 41, 44, 
40, 41, 91, 42, -41, -48, -49, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, -1, -2, -4, -5, -6, -7, 
-8, -9, -10, -11, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, -1, 
-2, -4, -5, -6, -7, -8, -9, -10, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, -1, -2, -4, -5, -6, -7, -8, -9, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, -1, -2, -4, -5, -6, -7, -8, -9, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, -1, -2, -4, -5, -6, -7, -8, 
-9, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, -1, -2, -4, -5, -6, -7, 
-8, -9, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, -1, -2, -4, -5, -6, -7, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, -1, -2, -4, -5, -6, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, -1, -2, -4, -5, -6, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, -1, 
-2, -4, -5, -6, 40, 41, 91, 44, 58, 61, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 123, 299, 300, 301, 
296, 297, 257, 40, 41, 91, 44, 58, 61, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 123, 299, 300, 301, 296, 
297, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, 302, -23, -26, -27, -28, -29, -35, -38, -45, 
41, 44, 41, 44, 257, 40, 41, 91, 44, -40, 
-49, 40, 41, 91, 44, 257, 40, 41, 91, 42, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
-23, -26, -27, -28, -29, -35, -38, -39, -40, -41, 
-43, -44, -45, -48, -49, 257, 258, 259, 40, 93, 
262, 263, 260, 38, 42, 43, 45, 126, 33, -1, 
-2, -4, -5, -6, -7, -8, -9, -10, -11, -12, 
-13, -14, -15, -16, -17, -21, 40, 41, 91, 44, 
58, 61, 59, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 123, 299, 
300, 301, 296, 297, 298, 288, 289, 290, 291, 294, 
295, 292, 293, 282, 125, 299, 300, 301, 296, 297, 
-27, -28, -29, -31, -32, -35, -38, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 125, 299, 300, 
301, 296, 297, 257, 40, 41, 91, 44, 42, 58, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, 44, 59, 44, 59, 44, 58, 59, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, -1, -2, -4, -5, -6, -7, -8, -9, -10, 
-11, -12, -13, -14, -15, -16, -17, -21, 257, 40, 
41, 91, 42, 58, 257, 40, 41, 91, 42, 58, 
44, 125, 257, 40, 41, 91, 44, 42, 58, 59, 
283, 284, 285, 286, 287, 298, 288, 289, 290, 291, 
294, 295, 292, 293, 282, 299, 300, 301, 296, 297, 
257, -37, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, 
-17, -21, 44, 125, 44, 125, 0, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 123, 125, 299, 300, 
301, 296, 297, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 306, 307, 308, 309, 310, 311, 
312, 313, 314, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 123, 303, 304, 
305, 307, 308, 309, 310, 311, 312, 313, 314, -1, 
-2, -4, -5, -6, -7, -8, -9, -10, -11, -12, 
-13, -14, -15, -16, -17, -18, -20, -52, -53, -54, 
-57, -58, -59, -60, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 59, 123, 125, 
303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 
313, 314, 41, 93, 44, 58, 59, 41, 44, 41, 
44, 41, 44, 40, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, 59, -1, -2, 
-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 
-14, -15, -16, -17, -18, -20, -57, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 123, 125, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 306, 307, 308, 309, 310, 311, 
312, 313, 314, 41, 93, 44, 58, 59, 125, 44, 
58, 41, 93, 44, 270, 271, 63, 58, 59, 125, 
40, 41, 91, 93, 46, 261, 262, 263, 44, 38, 
42, 43, 45, 47, 37, 264, 265, 60, 62, 266, 
267, 268, 269, 94, 124, 270, 271, 63, 58, 61, 
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 
59, 125, 41, 44, 41, 44, 40, 41, 91, 93, 
46, 261, 262, 263, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 61, 272, 273, 274, 275, 
276, 277, 278, 279, 280, 281, 59, 125, 40, 41, 
91, 93, 46, 261, 262, 263, 44, 38, 42, 43, 
45, 47, 37, 264, 265, 60, 62, 266, 267, 268, 
269, 94, 124, 270, 271, 63, 58, 61, 272, 273, 
274, 275, 276, 277, 278, 279, 280, 281, 59, 125, 
93, 44, 41, 41, 93, 44, 124, 270, 271, 63, 
58, 59, 125, 41, 93, 44, 94, 124, 270, 271, 
63, 58, 59, 125, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, 40, 41, 91, 93, 46, 261, 262, 263, 
44, 38, 42, 43, 45, 47, 37, 264, 265, 60, 
62, 266, 267, 268, 269, 94, 124, 270, 271, 63, 
58, 61, 272, 273, 274, 275, 276, 277, 278, 279, 
280, 281, 59, 125, 41, 40, 41, 91, -49, 40, 
41, 91, 42, 283, 284, 285, 286, 287, 298, 288, 
289, 290, 291, 294, 295, 292, 293, 282, 299, 300, 
301, 296, 297, -23, -26, -27, -28, -29, -35, -38, 
-41, -43, -44, -45, -48, -49, 41, 93, 44, 38, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 59, 125, 
41, 93, 44, 38, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 264, 265, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 264, 265, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 264, 265, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 264, 265, 60, 62, 266, 267, 268, 269, 
94, 124, 270, 271, 63, 58, 59, 125, 41, 93, 
44, 38, 43, 45, 264, 265, 60, 62, 266, 267, 
268, 269, 94, 124, 270, 271, 63, 58, 59, 125, 
41, 93, 44, 38, 43, 45, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 59, 125, 41, 93, 44, 
38, 42, 43, 45, 47, 37, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 59, 125, 41, 93, 44, 
38, 42, 43, 45, 47, 37, 264, 265, 60, 62, 
266, 267, 268, 269, 94, 124, 270, 271, 63, 58, 
59, 125, 41, 93, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 59, 125, 41, 44, 41, 
44, 41, 40, 41, 91, 44, 41, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 299, 300, 301, 296, 297, -23, -26, -27, 
-28, -29, -35, -38, -43, -44, -45, 257, 258, 259, 
40, 93, 262, 263, 260, 38, 42, 43, 45, 126, 
33, -1, -2, -4, -5, -6, -7, -8, -9, -10, 
-11, -12, -13, -14, -15, -16, -17, -21, 40, 41, 
91, 44, 41, 41, 40, 41, 91, 44, 93, 257, 
40, 41, 91, 44, 42, 58, 59, 283, 284, 285, 
286, 287, 298, 288, 289, 290, 291, 294, 295, 292, 
293, 282, 299, 300, 301, 296, 297, 298, 288, 289, 
290, 291, 294, 295, 292, 293, 282, 125, 299, 300, 
301, 296, 297, 257, 40, 42, 58, -34, -39, -40, 
-41, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, -1, -2, -4, -5, -6, -7, 
-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, 
-21, 44, 59, 257, 40, 41, 91, 44, 42, 58, 
59, 283, 284, 285, 286, 287, 298, 288, 289, 290, 
291, 294, 295, 292, 293, 282, 299, 300, 301, 296, 
297, 44, 125, 44, 125, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 123, 125, 
-1, -2, -4, -5, -6, -7, -8, -9, -10, -11, 
-12, -13, -14, -15, -16, -17, -18, -50, 44, 59, 
125, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 59, 123, 125, 303, 304, 305, 
306, 307, 308, 309, 310, 311, 312, 313, 314, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, 59, 123, 303, 304, 305, 307, 308, 309, 
310, 311, 312, 313, 314, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, 
-17, -18, -20, -52, -53, -54, -57, -58, -59, -60, 
257, 258, 259, 40, 262, 263, 260, 38, 42, 43, 
45, 126, 33, 59, 123, 303, 304, 305, 307, 308, 
309, 310, 311, 312, 313, 314, -1, -2, -4, -5, 
-6, -7, -8, -9, -10, -11, -12, -13, -14, -15, 
-16, -17, -18, -20, -52, -53, -54, -57, -58, -59, 
-60, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 59, 123, 303, 304, 305, 307, 
308, 309, 310, 311, 312, 313, 314, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -18, -20, -52, -53, -54, -57, -58, 
-59, -60, 257, 258, 259, 40, 262, 263, 260, 38, 
42, 43, 45, 126, 33, -1, -2, -4, -5, -6, 
-7, -8, -9, -10, -11, -12, -13, -14, -15, -16, 
-17, -18, -20, 257, 258, 259, 40, 41, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -18, -20, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, -1, -2, 
-4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 
-14, -15, -16, -17, 257, 258, 259, 40, 262, 263, 
260, 38, 42, 43, 45, 126, 33, -1, -2, -4, 
-5, -6, -7, -8, -9, -10, -11, -12, -13, -14, 
-15, -16, -17, -18, 40, 41, 91, 93, 46, 261, 
262, 263, 44, 38, 42, 43, 45, 47, 37, 264, 
265, 60, 62, 266, 267, 268, 269, 94, 124, 270, 
271, 63, 58, 61, 272, 273, 274, 275, 276, 277, 
278, 279, 280, 281, 59, 125, 40, 41, 91, 93, 
46, 261, 262, 263, 44, 38, 42, 43, 45, 47, 
37, 264, 265, 60, 62, 266, 267, 268, 269, 94, 
124, 270, 271, 63, 58, 61, 272, 273, 274, 275, 
276, 277, 278, 279, 280, 281, 59, 125, 41, 93, 
44, 38, 42, 43, 45, 47, 37, 264, 265, 60, 
62, 266, 267, 268, 269, 94, 124, 270, 271, 63, 
58, 61, 272, 273, 274, 275, 276, 277, 278, 279, 
280, 281, 59, 125, 41, 93, 44, 38, 42, 43, 
45, 47, 37, 264, 265, 60, 62, 266, 267, 268, 
269, 94, 124, 270, 271, 63, 58, 61, 272, 273, 
274, 275, 276, 277, 278, 279, 280, 281, 59, 125, 
40, 41, 91, 44, 41, 40, 41, 91, 44, 93, 
40, 41, 91, 44, 40, 41, 91, 44, 40, 41, 
91, 44, 44, 59, 44, 59, 44, 59, 125, 44, 
125, 257, 258, 259, 40, 262, 263, 260, 38, 42, 
43, 45, 126, 33, 59, 123, 125, 303, 304, 305, 
306, 307, 308, 309, 310, 311, 312, 313, 314, 257, 
258, 259, 40, 262, 263, 260, 38, 42, 43, 45, 
126, 33, 59, 123, 125, 303, 304, 305, 306, 307, 
308, 309, 310, 311, 312, 313, 314, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 123, 125, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 41, 44, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 123, 303, 304, 305, 307, 308, 309, 310, 311, 
312, 313, 314, -1, -2, -4, -5, -6, -7, -8, 
-9, -10, -11, -12, -13, -14, -15, -16, -17, -18, 
-20, -52, -53, -54, -57, -58, -59, -60, 41, 44, 
41, 93, 44, 58, 59, 125, 41, 44, 40, 41, 
91, 44, 40, 41, 91, 44, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 59, 
123, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, -1, -2, -4, -5, -6, -7, -8, -9, 
-10, -11, -12, -13, -14, -15, -16, -17, -18, -20, 
-52, -53, -54, -57, -58, -59, -60, 59, 257, 258, 
259, 40, 262, 263, 260, 38, 42, 43, 45, 126, 
33, 59, 123, 125, 303, 304, 305, 306, 307, 308, 
309, 310, 311, 312, 313, 314, 257, 258, 259, 40, 
262, 263, 260, 38, 42, 43, 45, 126, 33, 59, 
123, 303, 304, 305, 307, 308, 309, 310, 311, 312, 
313, 314, -1, -2, -4, -5, -6, -7, -8, -9, 
-10, -11, -12, -13, -14, -15, -16, -17, -18, -20, 
-52, -53, -54, -57, -58, -59, -60, 257, 258, 259, 
40, 262, 263, 260, 38, 42, 43, 45, 126, 33, 
59, 123, 125, 303, 304, 305, 306, 307, 308, 309, 
310, 311, 312, 313, 314, 257, 258, 259, 40, 262, 
263, 260, 38, 42, 43, 45, 126, 33, 59, 123, 
125, 303, 304, 305, 306, 307, 308, 309, 310, 311, 
312, 313, 314, 257, 258, 259, 40, 262, 263, 260, 
38, 42, 43, 45, 126, 33, 59, 123, 125, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 
314, -10000000};

static YYCONST yytabelem yyptblact[] = {
32, 33, 31, 12, 13, 14, 15, 16, 17, 18, 
19, 20, 21, 22, 23, 24, 25, 28, 36, 37, 
35, 29, 30, 4, 5, 7, 8, 26, 34, 27, 
9, 6, 11, 10, 1, 2, 3, 0, 32, 33, 
31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
21, 22, 23, 24, 25, 28, 36, 37, 35, 29, 
30, 4, 5, 7, 8, 26, 34, 27, 9, 6, 
11, 10, 38, 3, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 32, 33, 31, 39, 
40, 42, 41, 11, 10, 12, 13, 14, 15, 16, 
17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 
45, 36, 37, 35, 29, 30, 46, 47, 7, 8, 
26, 34, 27, 9, 43, 44, -1, -1, -1, -1, 
-1, -1, -1, 12, 13, 14, 15, 16, 17, 18, 
19, 20, 21, 22, 23, 24, 25, 28, 36, 37, 
35, 29, 30, 48, 7, 8, 26, 34, 27, 9, 
-1, -1, -1, -1, -1, -1, -1, 12, 13, 14, 
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
25, 28, 36, 37, 35, 29, 30, 49, 7, 8, 
26, 34, 27, 9, -1, -1, -1, -1, -1, -1, 
-1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
21, 22, 23, 24, 25, 28, 36, 37, 35, 29, 
30, 50, 7, 8, 26, 34, 27, 9, 32, 33, 
51, 52, -1, 53, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 31, 29, 30, 56, 54, 55, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, 32, 33, 31, 57, 11, 
10, 58, 59, 60, 61, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 63, 62, -1, 66, -1, 12, 13, 14, 15, 
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
28, 45, 36, 37, 35, 29, 30, 46, 47, 7, 
8, 26, 34, 27, 9, 64, 65, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 12, 13, 14, 15, 16, 17, 18, 
19, 20, 21, 22, 23, 24, 25, 28, 45, 36, 
37, 35, 29, 30, 67, 47, 7, 8, 26, 34, 
27, 9, 68, 79, 111, 112, 113, 98, 99, 101, 
104, 105, 106, 107, 108, 109, 82, 12, 13, 14, 
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
25, 28, 45, 71, 36, 37, 35, 29, 30, 80, 
81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
103, 97, 95, 100, 121, 120, 119, 118, 117, 116, 
115, 114, 110, 102, 96, 94, 93, 83, 46, 47, 
7, 8, 26, 34, 27, 9, 72, 73, 74, 69, 
70, 75, 76, 77, 78, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 32, 33, 31, 39, 40, 42, 122, 11, 
10, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 52, -1, 53, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
126, 123, 12, 13, 14, 15, 16, 17, 18, 19, 
20, 21, 22, 23, 24, 25, 28, 36, 37, 35, 
29, 30, 129, 7, 8, 26, 34, 27, 9, 125, 
127, 128, 124, 134, 111, 112, 113, 130, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 133, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 132, 131, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 31, 29, 30, 136, 135, -1, 
-1, -1, -1, -1, -1, -1, -1, 137, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 138, -1, -1, -1, -1, -1, 17, 18, 19, 
20, 21, 22, 23, 24, 25, 28, 36, 37, 35, 
29, 30, 142, 26, 34, 139, 140, 141, 27, 143, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 144, -1, -1, -1, -1, -1, 147, 
145, 146, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
32, 33, 31, 148, 122, 11, 10, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
21, 22, 23, 24, 25, 28, 45, 36, 37, 35, 
29, 30, 67, 47, 7, 8, 26, 34, 27, 9, 
149, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 152, 103, 97, 95, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 102, 96, 
94, 151, 150, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 79, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 82, 12, 13, 
14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 
24, 25, 28, 45, 154, 36, 37, 35, 29, 30, 
80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 
92, 103, 97, 95, 100, 121, 120, 119, 118, 117, 
116, 115, 114, 110, 102, 96, 94, 93, 83, 67, 
47, 7, 8, 26, 34, 27, 9, 72, 73, 74, 
153, 75, 76, 77, 78, 79, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 82, 45, 
155, 80, 81, 84, 85, 86, 87, 88, 89, 90, 
91, 92, 103, 97, 95, 100, 121, 120, 119, 118, 
117, 116, 115, 114, 110, 102, 96, 94, 93, 83, 
156, 73, 74, 75, 76, 77, 78, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, 157, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
134, 111, 112, 113, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 103, 97, 133, 100, 121, 120, 119, 
118, 117, 116, 115, 114, 110, 102, 96, 132, 158, 
159, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
160, 161, 162, 163, 164, 79, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 82, 45, 
80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 
92, 103, 97, 95, 100, 121, 120, 119, 118, 117, 
116, 115, 114, 110, 102, 96, 94, 93, 83, 165, 
73, 74, 75, 76, 77, 78, 166, 167, 168, 169, 
134, 111, 112, 113, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 170, 103, 97, 95, 100, 121, 120, 
119, 118, 117, 116, 115, 114, 110, 102, 96, 94, 
93, 171, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 173, 174, 175, 176, 
177, 178, 179, 180, 181, 182, 183, -1, -1, 172, 
-1, -1, -1, 185, 184, -1, -1, -1, 186, -1, 
191, -1, 187, 190, 189, 188, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
134, 111, 112, 193, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 103, 97, 192, 100, 134, 111, 112, 
193, 98, 99, 101, 104, 105, 106, 107, 108, 109, 
103, 97, 194, 100, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 133, 
100, 195, 134, 111, 112, 196, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 197, 100, -1, 
-1, -1, 198, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 199, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 17, 18, 19, 20, 21, 
22, 23, 24, 25, 28, 36, 37, 35, 29, 30, 
103, 97, 95, 100, 121, 120, 119, 118, 117, 116, 
115, 114, 110, 102, 96, 94, 93, 201, 142, 26, 
34, 202, 27, 143, 200, -1, -1, -1, 203, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, 204, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 205, 206, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 207, 208, 210, 209, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 211, 212, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 213, 214, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 216, -1, -1, 217, 
215, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 66, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 218, 219, 220, -1, -1, -1, 221, 
-1, -1, 32, 226, -1, 227, -1, 31, 223, 11, 
224, 222, 225, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 228, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 17, 18, 19, 20, 
21, 22, 23, 24, 25, 28, 36, 37, 35, 29, 
30, 142, 26, 34, 229, 140, 141, 27, 143, 17, 
18, 19, 20, 21, 22, 23, 24, 25, 28, 231, 
36, 37, 35, 29, 30, 142, 26, 34, 230, 141, 
27, 143, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, 32, 33, 
31, 235, 232, 233, 234, 11, 10, -1, -1, -1, 
-1, -1, -1, 17, 18, 19, 20, 21, 22, 23, 
24, 25, 28, 36, 37, 35, 29, 30, 142, 26, 
34, 236, 27, 143, -1, -1, -1, -1, -1, -1, 
17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 
36, 37, 35, 29, 30, 142, 26, 34, 237, 27, 
143, 147, 238, 146, 240, 239, -1, -1, -1, 241, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 152, 103, 97, 95, 100, 
121, 120, 119, 118, 117, 116, 115, 114, 110, 102, 
96, 94, 151, 243, 242, 79, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 82, 45, 
244, 80, 81, 84, 85, 86, 87, 88, 89, 90, 
91, 92, 103, 97, 95, 100, 121, 120, 119, 118, 
117, 116, 115, 114, 110, 102, 96, 94, 93, 83, 
156, 73, 74, 75, 76, 77, 78, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 79, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 82, 45, 80, 81, 84, 
85, 86, 87, 88, 89, 90, 91, 92, 103, 97, 
95, 100, 121, 120, 119, 118, 117, 116, 115, 114, 
110, 102, 96, 94, 93, 83, 245, 73, 74, 75, 
76, 77, 78, 246, 79, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 82, 45, 80, 
81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 
103, 97, 95, 100, 121, 120, 119, 118, 117, 116, 
115, 114, 110, 102, 96, 94, 93, 83, 247, 73, 
74, 75, 76, 77, 78, 134, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 103, 97, 
95, 100, 121, 120, 119, 118, 117, 116, 115, 114, 
110, 102, 96, 94, 248, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 95, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 94, 93, 249, 134, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 103, 97, 
95, 100, 121, 120, 119, 118, 117, 116, 115, 114, 
110, 102, 96, 94, 93, 250, 134, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 103, 
97, 95, 100, 121, 120, 119, 118, 117, 116, 115, 
114, 110, 102, 96, 94, 93, 251, 252, 134, 111, 
112, 113, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 82, 103, 97, 95, 100, 121, 120, 119, 118, 
117, 116, 115, 114, 110, 102, 96, 94, 93, 83, 
253, 254, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 160, 255, 134, 111, 
112, 113, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 103, 97, 95, 100, 121, 120, 119, 118, 117, 
116, 115, 114, 110, 102, 96, 94, 256, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 103, 97, 95, 100, 121, 120, 
119, 118, 117, 116, 115, 114, 110, 102, 96, 94, 
93, 257, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 258, 134, 
111, 112, 113, 259, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 103, 97, 260, 95, 100, 121, 120, 
119, 118, 117, 116, 115, 114, 110, 102, 96, 94, 
261, 262, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 263, 134, 111, 112, 
113, 98, 99, 101, 104, 105, 106, 107, 108, 109, 
103, 97, 95, 100, 121, 120, 119, 118, 117, 116, 
115, 114, 110, 102, 96, 94, 93, 264, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 95, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 94, 93, 201, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, 134, 111, 112, 
113, 98, 99, 101, 104, 105, 106, 107, 108, 109, 
17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 
36, 37, 35, 29, 30, 103, 97, 95, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 102, 96, 
94, 93, 201, 142, 26, 34, 202, 27, 143, 265, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 134, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 103, 
97, 133, 100, 121, 120, 119, 118, 117, 116, 115, 
114, 266, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
120, 119, 118, 117, 116, 115, 267, 268, 269, 160, 
272, -1, 227, 31, 271, 270, 225, 134, 111, 112, 
113, 98, 99, 101, 104, 105, 106, 107, 108, 109, 
103, 97, 133, 100, 121, 120, 119, 118, 117, 116, 
273, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 103, 97, 133, 100, 121, 120, 
119, 118, 117, 274, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 133, 
100, 121, 120, 119, 118, 275, 134, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 103, 
97, 133, 100, 121, 120, 119, 118, 276, 134, 111, 
112, 113, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 103, 97, 133, 100, 121, 120, 119, 277, 134, 
111, 112, 113, 98, 99, 101, 104, 105, 106, 107, 
108, 109, 103, 97, 133, 100, 121, 120, 119, 278, 
134, 111, 112, 113, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 103, 97, 133, 100, 121, 120, 119, 
279, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 103, 97, 133, 100, 121, 120, 
119, 280, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
120, 281, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
120, 282, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
283, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 103, 97, 133, 100, 121, 284, 
134, 111, 112, 113, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 103, 97, 133, 100, 285, 134, 111, 
112, 113, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 103, 97, 133, 100, 286, 134, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 103, 
97, 133, 100, 287, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 288, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
21, 22, 23, 24, 25, 28, 36, 37, 35, 29, 
30, 290, 129, 7, 8, 26, 34, 27, 9, 289, 
-1, -1, -1, -1, 32, 226, -1, 227, -1, 51, 
291, 292, -1, 293, -1, 32, 226, 294, 227, 31, 
12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 
22, 23, 24, 25, 28, 36, 37, 35, 29, 30, 
129, 7, 8, 26, 34, 27, 9, 57, 11, 224, 
296, 127, 128, 295, 225, 134, 111, 112, 113, 297, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 103, 
97, 133, 100, 121, 120, 119, 118, 117, 116, 115, 
114, 110, 102, 96, 132, 298, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 17, 18, 19, 20, 21, 22, 
23, 24, 25, 28, 299, 36, 37, 35, 29, 30, 
142, 26, 34, 230, 141, 27, 143, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 301, 300, -1, -1, -1, 302, -1, 134, 111, 
112, 113, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 103, 97, 133, 100, 121, 120, 119, 118, 117, 
116, 115, 114, 110, 102, 96, 132, 303, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
240, 304, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
147, 305, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 133, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 102, 96, 
132, 306, 307, 308, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 79, 111, 112, 113, 98, 99, 101, 
104, 105, 106, 107, 108, 109, 82, 45, 80, 81, 
84, 85, 86, 87, 88, 89, 90, 91, 92, 103, 
97, 95, 100, 121, 120, 119, 118, 117, 116, 115, 
114, 110, 102, 96, 94, 93, 83, 309, 73, 74, 
75, 76, 77, 78, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, 310, 160, 311, 
160, 312, 160, 313, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 82, 103, 97, 
95, 100, 121, 120, 119, 118, 117, 116, 115, 114, 
110, 102, 96, 94, 93, 83, 314, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, 160, 
315, -1, -1, -1, 198, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 317, 316, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
318, 160, 319, -1, -1, -1, 199, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 203, -1, -1, -1, 
-1, -1, -1, -1, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 133, 
100, 320, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, 272, -1, 227, 291, 272, 
294, 227, 31, 12, 13, 14, 15, 16, 17, 18, 
19, 20, 21, 22, 23, 24, 25, 28, 36, 37, 
35, 29, 30, 129, 7, 8, 26, 34, 27, 9, 
271, 296, 127, 128, 295, 225, -1, -1, -1, 204, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 205, 206, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 207, 208, 210, 209, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 207, 208, 210, 209, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 211, 212, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 211, 212, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 211, 212, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 211, 212, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 213, 214, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 213, 214, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 216, -1, -1, 217, 
215, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, 216, -1, -1, 217, 215, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, 292, -1, 293, -1, 321, 12, 13, 14, 
15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 
25, 28, 36, 37, 35, 29, 30, 129, 7, 8, 
26, 34, 27, 9, 322, 127, 128, 134, 111, 112, 
113, 323, 98, 99, 101, 104, 105, 106, 107, 108, 
109, 103, 97, 133, 100, 121, 120, 119, 118, 117, 
116, 115, 114, 110, 102, 96, 132, 324, -1, -1, 
-1, -1, 325, 326, -1, -1, -1, -1, 327, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, 32, 33, 31, 235, 328, 234, 11, 
10, 134, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 103, 97, 133, 100, 121, 120, 
119, 118, 117, 116, 115, 114, 110, 102, 96, 132, 
329, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, 134, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 152, 330, 
103, 97, 95, 100, 121, 120, 119, 118, 117, 116, 
115, 114, 110, 102, 96, 94, 151, 331, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 
111, 112, 113, 98, 99, 101, 104, 105, 106, 107, 
108, 109, 82, 45, 80, 81, 84, 85, 86, 87, 
88, 89, 90, 91, 92, 103, 97, 95, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 102, 96, 
94, 93, 83, 332, 73, 74, 75, 76, 77, 78, 
79, 111, 112, 113, 98, 99, 101, 104, 105, 106, 
107, 108, 109, 82, 45, 80, 81, 84, 85, 86, 
87, 88, 89, 90, 91, 92, 103, 97, 95, 100, 
121, 120, 119, 118, 117, 116, 115, 114, 110, 102, 
96, 94, 93, 83, 333, 73, 74, 75, 76, 77, 
78, 79, 111, 112, 113, 98, 99, 101, 104, 105, 
106, 107, 108, 109, 82, 45, 80, 81, 84, 85, 
86, 87, 88, 89, 90, 91, 92, 103, 97, 95, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 94, 93, 83, 334, 73, 74, 75, 76, 
77, 78, 134, 111, 112, 113, 98, 99, 101, 104, 
105, 106, 107, 108, 109, 103, 97, 95, 100, 121, 
120, 119, 118, 117, 116, 115, 114, 110, 102, 96, 
94, 93, 335, 134, 111, 112, 113, 336, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 95, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 94, 93, 337, 134, 111, 112, 113, 98, 
99, 101, 104, 105, 106, 107, 108, 109, 103, 97, 
133, 100, 121, 120, 119, 118, 117, 116, 115, 114, 
110, 102, 96, 338, 134, 111, 112, 113, 98, 99, 
101, 104, 105, 106, 107, 108, 109, 103, 97, 95, 
100, 121, 120, 119, 118, 117, 116, 115, 114, 110, 
102, 96, 94, 339, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, 340, -1, -1, -1, -1, 341, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, 343, 160, 79, 111, 112, 
113, 98, 99, 101, 104, 105, 106, 107, 108, 109, 
82, 45, 80, 81, 84, 85, 86, 87, 88, 89, 
90, 91, 92, 103, 97, 95, 100, 121, 120, 119, 
118, 117, 116, 115, 114, 110, 102, 96, 94, 93, 
83, 344, 73, 74, 75, 76, 77, 78, 345, 160, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 79, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 82, 
45, 80, 81, 84, 85, 86, 87, 88, 89, 90, 
91, 92, 103, 97, 95, 100, 121, 120, 119, 118, 
117, 116, 115, 114, 110, 102, 96, 94, 93, 83, 
346, 73, 74, 75, 76, 77, 78, 347, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, 79, 111, 112, 113, 
98, 99, 101, 104, 105, 106, 107, 108, 109, 82, 
45, 80, 81, 84, 85, 86, 87, 88, 89, 90, 
91, 92, 103, 97, 95, 100, 121, 120, 119, 118, 
117, 116, 115, 114, 110, 102, 96, 94, 93, 83, 
348, 73, 74, 75, 76, 77, 78, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
-1, -10000000};

static YYCONST yytabelem yyrowoffset[] = {
0, 
37, 74, 98, 122, 146, 155, 186, 220, 254, 288, 291, 
319, 346, 373, 400, 427, 454, 482, 510, 538, 566, 
594, 622, 650, 678, 706, 734, 762, 790, 818, 846, 
857, 885, 891, 893, 895, 897, 899, 923, 971, 973, 
1007, 1009, 1033, 1063, 1145, 1192, 1201, 1208, 1215, 1222, 
1250, 1283, 1314, 1319, 1329, 1337, 1338, 1367, 1390, 1419, 
1422, 1470, 1477, 1501, 1531, 1563, 1610, 1634, 1715, 1767, 
1816, 1843, 1871, 1899, 1927, 1955, 1983, 2011, 2050, 2080, 
2081, 2110, 2112, 2113, 2114, 2115, 2166, 2167, 2168, 2169, 
2170, 2202, 2207, 2213, 2250, 2258, 2300, 2317, 2334, 2352, 
2369, 2378, 2420, 2433, 2446, 2459, 2472, 2485, 2498, 2508, 
2550, 2592, 2645, 2656, 2668, 2682, 2700, 2720, 2742, 2767, 
2792, 2795, 2823, 2825, 2826, 2828, 2830, 2832, 2843, 2871, 
2872, 2877, 2913, 2955, 2960, 2968, 2996, 3019, 3042, 3058, 
3067, 3094, 3121, 3124, 3126, 3128, 3131, 3133, 3157, 3159, 
3162, 3195, 3247, 3296, 3345, 3372, 3423, 3424, 3475, 3505, 
3534, 3565, 3596, 3627, 3628, 3661, 3662, 3690, 3718, 3746, 
3748, 3778, 3791, 3804, 3817, 3830, 3843, 3856, 3869, 3882, 
3895, 3908, 3921, 3952, 3979, 4011, 4012, 4054, 4096, 4097, 
4128, 4164, 4195, 4231, 4267, 4320, 4356, 4382, 4407, 4408, 
4410, 4417, 4441, 4464, 4486, 4508, 4529, 4550, 4571, 4592, 
4612, 4632, 4651, 4670, 4688, 4706, 4724, 4752, 4753, 4781, 
4810, 4812, 4814, 4821, 4825, 4865, 4896, 4924, 4947, 4963, 
4991, 4993, 4995, 4998, 5028, 5034, 5040, 5042, 5070, 5072, 
5102, 5104, 5106, 5155, 5183, 5234, 5262, 5267, 5269, 5271, 
5273, 5274, 5307, 5335, 5363, 5369, 5371, 5380, 5422, 5424, 
5426, 5468, 5510, 5512, 5513, 5523, 5534, 5552, 5594, 5595, 
5599, 5636, 5648, 5662, 5680, 5698, 5718, 5738, 5758, 5778, 
5800, 5822, 5847, 5872, 5897, 5922, 5947, 5949, 5951, 5952, 
5956, 5987, 6018, 6022, 6023, 6024, 6028, 6029, 6057, 6073, 
6081, 6111, 6113, 6141, 6143, 6145, 6178, 6181, 6209, 6260, 
6311, 6362, 6393, 6425, 6454, 6484, 6526, 6568, 6604, 6640, 
6644, 6645, 6649, 6650, 6654, 6658, 6662, 6664, 6666, 6669, 
6671, 6699, 6727, 6755, 6757, 6808, 6810, 6816, 6818, 6822, 
6826, 6877, 6878, 6906, 6957, 6985, 7013, 7041};

static YYCONST yytabelem yyr1[] = {
     0,    -1,    -1,    -1,    -1,    -2,    -2,    -2,    -2,    -2,
    -2,    -2,    -2,    -3,    -3,    -4,    -4,    -4,    -4,    -4,
    -4,    -5,    -5,    -5,    -5,    -5,    -5,    -6,    -6,    -7,
    -7,    -7,    -7,    -8,    -8,    -8,    -9,    -9,    -9,   -10,
   -10,   -10,   -10,   -10,   -11,   -11,   -11,   -12,   -12,   -13,
   -13,   -14,   -14,   -15,   -15,   -16,   -16,   -17,   -17,   -18,
   -18,   -19,   -19,   -19,   -19,   -19,   -19,   -19,   -19,   -19,
   -19,   -19,   -20,   -20,   -21,   -22,   -22,   -23,   -23,   -23,
   -23,   -23,   -23,   -24,   -24,   -25,   -25,   -26,   -26,   -26,
   -26,   -26,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,
   -27,   -27,   -27,   -27,   -28,   -28,   -28,   -29,   -29,   -30,
   -30,   -31,   -32,   -32,   -32,   -32,   -33,   -33,   -34,   -34,
   -34,   -35,   -35,   -35,   -36,   -36,   -37,   -37,   -38,   -38,
   -39,   -39,   -40,   -40,   -40,   -40,   -40,   -40,   -40,   -41,
   -41,   -41,   -41,   -42,   -42,   -43,   -43,   -44,   -44,   -45,
   -45,   -45,   -46,   -46,   -47,   -47,   -48,   -48,   -48,   -49,
   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -50,   -50,
   -50,   -51,   -51,   -52,   -52,   -52,   -52,   -52,   -52,   -53,
   -53,   -53,   -54,   -54,   -54,   -54,   -55,   -55,   -56,   -56,
   -57,   -57,   -58,   -58,   -58,   -59,   -59,   -59,   -59,   -60,
   -60,   -60,   -60,   -60,   -61,   -61,   -62,   -62,   -63,   -63,
   -63,   -63};
static YYCONST yytabelem yyr2[] = {
     0,     2,     2,     2,     6,     2,     8,     6,     8,     6,
     6,     4,     4,     2,     6,     2,     4,     4,     4,     4,
     8,     2,     2,     2,     2,     2,     2,     2,     8,     2,
     6,     6,     6,     2,     6,     6,     2,     6,     6,     2,
     6,     6,     6,     6,     2,     6,     6,     2,     6,     2,
     6,     2,     6,     2,     6,     2,     6,     2,    10,     2,
     6,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     6,     2,     4,     6,     2,     4,     2,
     4,     2,     4,     2,     6,     2,     6,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    10,     8,     4,     2,     2,     2,
     4,     6,     4,     2,     4,     2,     2,     6,     2,     4,
     6,     8,    10,     4,     2,     6,     2,     6,     2,     2,
     4,     2,     2,     6,     8,     6,     8,     8,     6,     2,
     4,     4,     6,     2,     4,     2,     6,     2,     6,     4,
     4,     2,     2,     6,     2,     4,     2,     2,     4,     6,
     4,     6,     6,     8,     4,     6,     6,     8,     2,     6,
     8,     2,     6,     2,     2,     2,     2,     2,     2,     6,
     8,     6,     4,     6,     6,     8,     2,     4,     2,     4,
     2,     4,    10,    14,    10,    10,    14,    12,    14,     6,
     4,     4,     4,     6,     2,     4,     2,     2,     8,     6,
     6,     4};

#ifdef YYDEBUG

typedef struct {char *t_name; int t_val;} yytoktype;

yytoktype yynts[] = {
	"0x604000001020",	-1,
	"0x604000001120",	-2,
	"0x6040000011e0",	-3,
	"0x6040000012e0",	-4,
	"0x604000001320",	-5,
	"0x604000001360",	-6,
	"0x604000001560",	-7,
	"0x604000001620",	-8,
	"0x604000001660",	-9,
	"0x6040000016a0",	-10,
	"0x604000001760",	-11,
	"0x6040000017a0",	-12,
	"0x6040000017e0",	-13,
	"0x604000001860",	-14,
	"0x6040000018e0",	-15,
	"0x604000001920",	-16,
	"0x604000001960",	-17,
	"0x604000001260",	-18,
	"0x604000001a20",	-19,
	"0x6040000010a0",	-20,
	"0x604000001aa0",	-21,
	"0x604000001ae0",	-22,
	"0x604000001b20",	-23,
	"0x604000001ba0",	-24,
	"0x604000001ca0",	-25,
	"0x604000001be0",	-26,
	"0x604000001c20",	-27,
	"0x604000001d60",	-28,
	"0x604000001de0",	-29,
	"0x604000001e60",	-30,
	"0x604000001ee0",	-31,
	"0x604000001f20",	-32,
	"0x604000001f60",	-33,
	"0x604000001fa0",	-34,
	"0x604000001da0",	-35,
	"0x604000001fe0",	-36,
	"0x604000002020",	-37,
	"0x604000001c60",	-38,
	"0x604000001ce0",	-39,
	"0x6040000020a0",	-40,
	"0x604000002060",	-41,
	"0x604000002160",	-42,
	"0x6040000020e0",	-43,
	"0x6040000021a0",	-44,
	"0x6040000021e0",	-45,
	"0x604000002120",	-46,
	"0x6040000013a0",	-47,
	"0x604000002220",	-48,
	"0x604000002260",	-49,
	"0x604000001d20",	-50,
	"0x6040000022a0",	-51,
	"0x6040000022e0",	-52,
	"0x604000002320",	-53,
	"0x604000002360",	-54,
	"0x6040000024e0",	-55,
	"0x6040000024a0",	-56,
	"0x6040000023a0",	-57,
	"0x6040000023e0",	-58,
	"0x604000002420",	-59,
	"0x604000002460",	-60,
	"0x604000000fe0",	-61,
	"0x604000002520",	-62,
	"0x604000002560",	-63,
	"-unknown-", 1  /* ends search */
};
yytoktype yytoks[] = {
	"0x604000000160",	257,
	"0x6040000001a0",	258,
	"0x6040000001e0",	259,
	"0x604000000220",	260,
	"0x604000000260",	261,
	"0x6040000002a0",	262,
	"0x6040000002e0",	263,
	"0x604000000320",	264,
	"0x604000000360",	265,
	"0x6040000003a0",	266,
	"0x6040000003e0",	267,
	"0x604000000420",	268,
	"0x604000000460",	269,
	"0x6040000004a0",	270,
	"0x6040000004e0",	271,
	"0x604000000520",	272,
	"0x604000000560",	273,
	"0x6040000005a0",	274,
	"0x6040000005e0",	275,
	"0x604000000620",	276,
	"0x604000000660",	277,
	"0x6040000006a0",	278,
	"0x6040000006e0",	279,
	"0x604000000720",	280,
	"0x604000000760",	281,
	"0x6040000007a0",	282,
	"0x6040000007e0",	283,
	"0x604000000820",	284,
	"0x604000000860",	285,
	"0x6040000008a0",	286,
	"0x6040000008e0",	287,
	"0x604000000920",	288,
	"0x604000000960",	289,
	"0x6040000009a0",	290,
	"0x6040000009e0",	291,
	"0x604000000a20",	292,
	"0x604000000a60",	293,
	"0x604000000aa0",	294,
	"0x604000000ae0",	295,
	"0x604000000b20",	296,
	"0x604000000b60",	297,
	"0x604000000ba0",	298,
	"0x604000000be0",	299,
	"0x604000000c20",	300,
	"0x604000000c60",	301,
	"0x604000000ca0",	302,
	"0x604000000ce0",	303,
	"0x604000000d20",	304,
	"0x604000000d60",	305,
	"0x604000000da0",	306,
	"0x604000000de0",	307,
	"0x604000000e20",	308,
	"0x604000000e60",	309,
	"0x604000000ea0",	310,
	"0x604000000ee0",	311,
	"0x604000000f20",	312,
	"0x604000000f60",	313,
	"0x604000000fa0",	314,
	"0x604000001060",	40,
	"0x6040000010e0",	41,
	"0x604000001160",	91,
	"0x6040000011a0",	93,
	"0x604000001220",	46,
	"0x6040000012a0",	44,
	"0x6040000013e0",	38,
	"0x604000001420",	42,
	"0x604000001460",	43,
	"0x6040000014a0",	45,
	"0x6040000014e0",	126,
	"0x604000001520",	33,
	"0x6040000015a0",	47,
	"0x6040000015e0",	37,
	"0x6040000016e0",	60,
	"0x604000001720",	62,
	"0x604000001820",	94,
	"0x6040000018a0",	124,
	"0x6040000019a0",	63,
	"0x6040000019e0",	58,
	"0x604000001a60",	61,
	"0x604000001b60",	59,
	"0x604000001e20",	123,
	"0x604000001ea0",	125,
	"-unknown-", -1  /* ends search */
};
char * yyreds[] = {
	"-no such reduction-"
	"0x604000001020 : IDENTIFIER", 
	"0x604000001020 : CONSTANT", 
	"0x604000001020 : STRING_LITERAL", 
	"0x604000001020 : '(' expression ')'", 
	"0x604000001120 : primary_expression", 
	"0x604000001120 : postfix_expression '[' expression ']'", 
	"0x604000001120 : postfix_expression '(' ')'", 
	"0x604000001120 : postfix_expression '(' argument_expression_list ')'", 
	"0x604000001120 : postfix_expression '.' IDENTIFIER", 
	"0x604000001120 : postfix_expression PTR_OP IDENTIFIER", 
	"0x604000001120 : postfix_expression INC_OP", 
	"0x604000001120 : postfix_expression DEC_OP", 
	"0x6040000011e0 : assignment_expression", 
	"0x6040000011e0 : argument_expression_list ',' assignment_expression", 
	"0x6040000012e0 : postfix_expression", 
	"0x6040000012e0 : INC_OP unary_expression", 
	"0x6040000012e0 : DEC_OP unary_expression", 
	"0x6040000012e0 : unary_operator cast_expression", 
	"0x6040000012e0 : SIZEOF unary_expression", 
	"0x6040000012e0 : SIZEOF '(' type_name ')'", 
	"0x604000001320 : '&'", 
	"0x604000001320 : '*'", 
	"0x604000001320 : '+'", 
	"0x604000001320 : '-'", 
	"0x604000001320 : '~'", 
	"0x604000001320 : '!'", 
	"0x604000001360 : unary_expression", 
	"0x604000001360 : '(' type_name ')' cast_expression", 
	"0x604000001560 : cast_expression", 
	"0x604000001560 : multiplicative_expression '*' cast_expression", 
	"0x604000001560 : multiplicative_expression '/' cast_expression", 
	"0x604000001560 : multiplicative_expression '%' cast_expression", 
	"0x604000001620 : multiplicative_expression", 
	"0x604000001620 : additive_expression '+' multiplicative_expression", 
	"0x604000001620 : additive_expression '-' multiplicative_expression", 
	"0x604000001660 : additive_expression", 
	"0x604000001660 : shift_expression LEFT_OP additive_expression", 
	"0x604000001660 : shift_expression RIGHT_OP additive_expression", 
	"0x6040000016a0 : shift_expression", 
	"0x6040000016a0 : relational_expression '<' shift_expression", 
	"0x6040000016a0 : relational_expression '>' shift_expression", 
	"0x6040000016a0 : relational_expression LE_OP shift_expression", 
	"0x6040000016a0 : relational_expression GE_OP shift_expression", 
	"0x604000001760 : relational_expression", 
	"0x604000001760 : equality_expression EQ_OP relational_expression", 
	"0x604000001760 : equality_expression NE_OP relational_expression", 
	"0x6040000017a0 : equality_expression", 
	"0x6040000017a0 : and_expression '&' equality_expression", 
	"0x6040000017e0 : and_expression", 
	"0x6040000017e0 : exclusive_or_expression '^' and_expression", 
	"0x604000001860 : exclusive_or_expression", 
	"0x604000001860 : inclusive_or_expression '|' exclusive_or_expression", 
	"0x6040000018e0 : inclusive_or_expression", 
	"0x6040000018e0 : logical_and_expression AND_OP inclusive_or_expression", 
	"0x604000001920 : logical_and_expression", 
	"0x604000001920 : logical_or_expression OR_OP logical_and_expression", 
	"0x604000001960 : logical_or_expression", 
	"0x604000001960 : logical_or_expression '?' expression ':' conditional_expression", 
	"0x604000001260 : conditional_expression", 
	"0x604000001260 : unary_expression assignment_operator assignment_expression", 
	"0x604000001a20 : '='", 
	"0x604000001a20 : MUL_ASSIGN", 
	"0x604000001a20 : DIV_ASSIGN", 
	"0x604000001a20 : MOD_ASSIGN", 
	"0x604000001a20 : ADD_ASSIGN", 
	"0x604000001a20 : SUB_ASSIGN", 
	"0x604000001a20 : LEFT_ASSIGN", 
	"0x604000001a20 : RIGHT_ASSIGN", 
	"0x604000001a20 : AND_ASSIGN", 
	"0x604000001a20 : XOR_ASSIGN", 
	"0x604000001a20 : OR_ASSIGN", 
	"0x6040000010a0 : assignment_expression", 
	"0x6040000010a0 : expression ',' assignment_expression", 
	"0x604000001aa0 : conditional_expression", 
	"0x604000001ae0 : declaration_specifiers ';'", 
	"0x604000001ae0 : declaration_specifiers init_declarator_list ';'", 
	"0x604000001b20 : storage_class_specifier", 
	"0x604000001b20 : storage_class_specifier declaration_specifiers", 
	"0x604000001b20 : type_specifier", 
	"0x604000001b20 : type_specifier declaration_specifiers", 
	"0x604000001b20 : type_qualifier", 
	"0x604000001b20 : type_qualifier declaration_specifiers", 
	"0x604000001ba0 : init_declarator", 
	"0x604000001ba0 : init_declarator_list ',' init_declarator", 
	"0x604000001ca0 : declarator", 
	"0x604000001ca0 : declarator '=' initializer", 
	"0x604000001be0 : TYPEDEF", 
	"0x604000001be0 : EXTERN", 
	"0x604000001be0 : STATIC", 
	"0x604000001be0 : AUTO", 
	"0x604000001be0 : REGISTER", 
	"0x604000001c20 : VOID", 
	"0x604000001c20 : CHAR", 
	"0x604000001c20 : SHORT", 
	"0x604000001c20 : INT", 
	"0x604000001c20 : LONG", 
	"0x604000001c20 : FLOAT", 
	"0x604000001c20 : DOUBLE", 
	"0x604000001c20 : SIGNED", 
	"0x604000001c20 : UNSIGNED", 
	"0x604000001c20 : struct_or_union_specifier", 
	"0x604000001c20 : enum_specifier", 
	"0x604000001c20 : TYPE_NAME", 
	"0x604000001d60 : struct_or_union IDENTIFIER '{' struct_declaration_list '}'", 
	"0x604000001d60 : struct_or_union '{' struct_declaration_list '}'", 
	"0x604000001d60 : struct_or_union IDENTIFIER", 
	"0x604000001de0 : STRUCT", 
	"0x604000001de0 : UNION", 
	"0x604000001e60 : struct_declaration", 
	"0x604000001e60 : struct_declaration_list struct_declaration", 
	"0x604000001ee0 : specifier_qualifier_list struct_declarator_list ';'", 
	"0x604000001f20 : type_specifier specifier_qualifier_list", 
	"0x604000001f20 : type_specifier", 
	"0x604000001f20 : type_qualifier specifier_qualifier_list", 
	"0x604000001f20 : type_qualifier", 
	"0x604000001f60 : struct_declarator", 
	"0x604000001f60 : struct_declarator_list ',' struct_declarator", 
	"0x604000001fa0 : declarator", 
	"0x604000001fa0 : ':' constant_expression", 
	"0x604000001fa0 : declarator ':' constant_expression", 
	"0x604000001da0 : ENUM '{' enumerator_list '}'", 
	"0x604000001da0 : ENUM IDENTIFIER '{' enumerator_list '}'", 
	"0x604000001da0 : ENUM IDENTIFIER", 
	"0x604000001fe0 : enumerator", 
	"0x604000001fe0 : enumerator_list ',' enumerator", 
	"0x604000002020 : IDENTIFIER", 
	"0x604000002020 : IDENTIFIER '=' constant_expression", 
	"0x604000001c60 : CONST", 
	"0x604000001c60 : VOLATILE", 
	"0x604000001ce0 : pointer direct_declarator", 
	"0x604000001ce0 : direct_declarator", 
	"0x6040000020a0 : IDENTIFIER", 
	"0x6040000020a0 : '(' declarator ')'", 
	"0x6040000020a0 : direct_declarator '[' constant_expression ']'", 
	"0x6040000020a0 : direct_declarator '[' ']'", 
	"0x6040000020a0 : direct_declarator '(' parameter_type_list ')'", 
	"0x6040000020a0 : direct_declarator '(' identifier_list ')'", 
	"0x6040000020a0 : direct_declarator '(' ')'", 
	"0x604000002060 : '*'", 
	"0x604000002060 : '*' type_qualifier_list", 
	"0x604000002060 : '*' pointer", 
	"0x604000002060 : '*' type_qualifier_list pointer", 
	"0x604000002160 : type_qualifier", 
	"0x604000002160 : type_qualifier_list type_qualifier", 
	"0x6040000020e0 : parameter_list", 
	"0x6040000020e0 : parameter_list ',' ELLIPSIS", 
	"0x6040000021a0 : parameter_declaration", 
	"0x6040000021a0 : parameter_list ',' parameter_declaration", 
	"0x6040000021e0 : declaration_specifiers declarator", 
	"0x6040000021e0 : declaration_specifiers abstract_declarator", 
	"0x6040000021e0 : declaration_specifiers", 
	"0x604000002120 : IDENTIFIER", 
	"0x604000002120 : identifier_list ',' IDENTIFIER", 
	"0x6040000013a0 : specifier_qualifier_list", 
	"0x6040000013a0 : specifier_qualifier_list abstract_declarator", 
	"0x604000002220 : pointer", 
	"0x604000002220 : direct_abstract_declarator", 
	"0x604000002220 : pointer direct_abstract_declarator", 
	"0x604000002260 : '(' abstract_declarator ')'", 
	"0x604000002260 : '[' ']'", 
	"0x604000002260 : '[' constant_expression ']'", 
	"0x604000002260 : direct_abstract_declarator '[' ']'", 
	"0x604000002260 : direct_abstract_declarator '[' constant_expression ']'", 
	"0x604000002260 : '(' ')'", 
	"0x604000002260 : '(' parameter_type_list ')'", 
	"0x604000002260 : direct_abstract_declarator '(' ')'", 
	"0x604000002260 : direct_abstract_declarator '(' parameter_type_list ')'", 
	"0x604000001d20 : assignment_expression", 
	"0x604000001d20 : '{' initializer_list '}'", 
	"0x604000001d20 : '{' initializer_list ',' '}'", 
	"0x6040000022a0 : initializer", 
	"0x6040000022a0 : initializer_list ',' initializer", 
	"0x6040000022e0 : labeled_statement", 
	"0x6040000022e0 : compound_statement", 
	"0x6040000022e0 : expression_statement", 
	"0x6040000022e0 : selection_statement", 
	"0x6040000022e0 : iteration_statement", 
	"0x6040000022e0 : jump_statement", 
	"0x604000002320 : IDENTIFIER ':' statement", 
	"0x604000002320 : CASE constant_expression ':' statement", 
	"0x604000002320 : DEFAULT ':' statement", 
	"0x604000002360 : '{' '}'", 
	"0x604000002360 : '{' statement_list '}'", 
	"0x604000002360 : '{' declaration_list '}'", 
	"0x604000002360 : '{' declaration_list statement_list '}'", 
	"0x6040000024e0 : declaration", 
	"0x6040000024e0 : declaration_list declaration", 
	"0x6040000024a0 : statement", 
	"0x6040000024a0 : statement_list statement", 
	"0x6040000023a0 : ';'", 
	"0x6040000023a0 : expression ';'", 
	"0x6040000023e0 : IF '(' expression ')' statement", 
	"0x6040000023e0 : IF '(' expression ')' statement ELSE statement", 
	"0x6040000023e0 : SWITCH '(' expression ')' statement", 
	"0x604000002420 : WHILE '(' expression ')' statement", 
	"0x604000002420 : DO statement WHILE '(' expression ')' ';'", 
	"0x604000002420 : FOR '(' expression_statement expression_statement ')' statement", 
	"0x604000002420 : FOR '(' expression_statement expression_statement expression ')' statement", 
	"0x604000002460 : GOTO IDENTIFIER ';'", 
	"0x604000002460 : CONTINUE ';'", 
	"0x604000002460 : BREAK ';'", 
	"0x604000002460 : RETURN ';'", 
	"0x604000002460 : RETURN expression ';'", 
	"0x604000000fe0 : external_declaration", 
	"0x604000000fe0 : translation_unit external_declaration", 
	"0x604000002520 : function_definition", 
	"0x604000002520 : declaration", 
	"0x604000002560 : declaration_specifiers declarator declaration_list compound_statement", 
	"0x604000002560 : declaration_specifiers declarator compound_statement", 
	"0x604000002560 : declarator declaration_list compound_statement", 
	"0x604000002560 : declarator compound_statement", 
};
#endif /* YYDEBUG */

/*
 * Copyright (c) 2007, Xin Chen
 * All rights reserved. This file is distributed under BSD license.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY the copyright holder ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL the copyright holder BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * hyaccpar
 *
 * HYACC Parser engine.
 *
 * @Author: Xin Chen
 * @Created on: 1/30/2007
 * @Last modified: 10/27/2007
 * @Copyright (C) 2007
 */

#define YYLEX() yylex()

#define YYNOACTION -10000000 
#define YYEOF     0   /* for strEnd, input end marker. */
#define YYERRCODE 256 /* for use by "error" token. */

#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
#define YYRESUME return(0)
#define YYABORT return(1)
#define YYACCEPT return(0)
#define YYERROR goto yyerrlab
#define YYRECOVERING() (!!yyerrflag) /* !! */
#define YYMAX_STACK_CAPACITY 16384   /* 2^14 */
static int yystack_capacity = 256; /* initial stack capacity. */
#define YYNEW(type) (type *) malloc((yystack_capacity) * sizeof(type))
#define YYENLARGE(from, type) \
        (type *) realloc((void *) from, (yystack_capacity) * sizeof(type))
#define YYERR_EXIT(errmsg) { printf("%s\n", errmsg); exit(1); }

int yychar;     /* current input token number, i.e., lookahead. */
static FILE * yyparse_fp; /* output file to trace parse steps. */
static char * yyparse_file = "y.parse";
static int * yyps;     /* state stack. */
static int yyps_pt;    /* top of state stack: yyps+yyps_pt-1. */
YYSTYPE * yypv; /* value stack. */
static int yypv_pt;    /* top of value stack: yypv+yypv_pt-1. */
#if YYDEBUG
static int * yypm;     /* symbol stack. */
static int yypm_pt;    /* top of symbol stack: yypm+yypm_pt-1. */
#endif

int yynerrs;    /* number of errors */
int yyerrflag;  /* error recovery flag */

extern int yychar;
extern int yyerrflag;

YYSTYPE yylval; /* the value of yylval is from yylex. */
YYSTYPE yyval;  /* "$$" used in production action. */


#if YYDEBUG

/* get token name from value of yychar. */
static char * yyget_tok(const int yychar)
{
  static char c[1];
  int i;
  if (yychar == YYEOF) return "EOF";
  if (yychar == 256) return "error";
  if (yychar < 0) { /* search for non-terminal. */
    for (i = 0; yynts[i].t_val <= 0; i ++)  
      if (yychar == yynts[i].t_val) return yynts[i].t_name;
  }
  /* yychar > 256, search for terminal. */
  for (i = 0; yytoks[i].t_val >= 0; i ++) 
    if (yychar == yytoks[i].t_val) return yytoks[i].t_name;
  if (yychar > 0 && yychar < 256) { c[0] = yychar; return c; }
  
  return "-none-";
}

static void yywrite_stack(void)
{ 
  int i; 
  /* It's unknown what data type yypv is, so can't write here. */ 
  /* The user can customize the code here himself. */ 
  /* fprintf(yyparse_fp, "value stack: "); 
     for (i = 0; i < yypv_pt - 1; i ++) 
     fprintf(yyparse_fp, "%d, ", yypv[i]); 
     if (yypv_pt > 0) fprintf(yyparse_fp, "%d", yypv[i]); 
     fprintf(yyparse_fp, "\n"); 
  */

  fprintf(yyparse_fp, "symbol stack: ");
  for (i = 0; i < yypm_pt - 1; i ++)
    fprintf(yyparse_fp, "%s, ", yyget_tok(yypm[i]));
  if (yypm_pt > 0) fprintf(yyparse_fp, "%s", yyget_tok(yypm[i]));
  fprintf(yyparse_fp, "\n");
  
  fprintf(yyparse_fp, "state stack: "); 
  for (i = 0; i < yyps_pt - 1; i ++) 
    fprintf(yyparse_fp, "%d, ", yyps[i]); 
  if (yyps_pt > 0) fprintf(yyparse_fp, "%d", yyps[i]); 
  fprintf(yyparse_fp, "\n"); 
}

#define YYEXPAND_SYMBOL_STACK  \
    if ((yypm = YYENLARGE(yypm, int)) == NULL)  \
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");

#else
#define YYEXPAND_SYMBOL_STACK
#endif


#define YYEXPAND_STACK \
{ \
  if (yyps_pt >= YYMAX_STACK_CAPACITY) {				\
    printf("YYEXPAND_STACK error: YYMAX_STACK_CAPACITY reached.\n");	\
    exit(1);								\
  }									\
  if (yyps_pt >= yystack_capacity) {					\
    yystack_capacity *= 2;						\
    if ((yyps = YYENLARGE(yyps, int)) == NULL)				\
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");		\
    if ((yypv = YYENLARGE(yypv, YYSTYPE)) == NULL)			\
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");		\
    YYEXPAND_SYMBOL_STACK						\
    /*printf("stack size expanded to %d\n", yystack_capacity); */	\
  }									\
}


/*
 * A macro to get an action from (state, token) pair in the
 * parsing table. Use macro instead of function to improve
 * performance.
 * Input: state, token
 * Output: action
 * if action > 0, then is a shift/goto target state.
 * if action < 0, then is the reduction rule number.
 * if action == 0, then is accept.
 * if action == YYNOACTION, then no action exists.
 */
#define YYGET_ACTION(state, token, action) \
{ \
  /* offset_h to (offset_t - 1) is the range to search. */	\
  int offset_h = yyrowoffset[state];				\
  int offset_t = yyrowoffset[state + 1];			\
								\
  /* now use linear search. Will change to binary search. */	\
  int offset;							\
  for (offset = offset_h; offset < offset_t; offset ++)		\
    if (yyptbltok[offset] == token) break;			\
								\
  if (offset == offset_t) action = YYNOACTION;			\
  else action = yyptblact[offset];				\
}


/*
 * Handles error when no action is found in yyparse().
 * state: yystate. lookahead: yychar.
 * return: 0 if success, -1 if fail, 1 if eat a token.
 */
static int yyerror_handler(int yystate)
{
  int yyaction;
  switch (yyerrflag) {
  case 0:
    yyerror("syntax error"); 
#if YYDEBUG
    fprintf(yyparse_fp, "syntax error: \
        no action exists for state/token pair (%d, %s).\n",
	    yystate, yyget_tok(yychar)); 
#endif
    goto skip_init;

  skip_init:
    yynerrs ++;
  case 1:
  case 2: /* incompletely recovered error */
    yyerrflag = 3; /* ! */
    /* find state where "error" is a legal shift action */
    while (yyps_pt > 0) { /* while state stack is not empty. */
#if YYDEBUG
      fprintf(yyparse_fp, 
	      "look for error action on state %d\n", yystate);
#endif
      YYGET_ACTION(yystate, YYERRCODE, yyaction);
      if (yyaction > 0) { /* shift on "error" found for yystate. */
	/* simulate shift for "error" token. */
	/* push target state on state stack. */
	* (yyps + yyps_pt) = yyaction; 
	if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 
	* (yypv + yypv_pt) = yyval; /* should not matter */
	yypv_pt ++;
#if YYDEBUG
	* (yypm + yypm_pt) = YYERRCODE;
	yypm_pt ++;
	fprintf(yyparse_fp, "- shift on error\n");
#endif
	return 0; /* return control to yyparse(), resume parsing. */
      } else {    /* no error shift action found, pop this state. */
#if YYDEBUG
	fprintf(yyparse_fp, 
		"- pop state %d\n", * (yyps + yyps_pt - 1));
#endif
	yyps_pt --; /* pop state stack. */
	yypv_pt --; /* pop value stack. */
#if YYDEBUG
	yypm_pt --;
	yywrite_stack();
#endif
	yystate = * (yyps + yyps_pt - 1); /* get current state. */
      }
    }
    /* the state stack is empty now, no error shift action found. */
#if YYDEBUG
    fprintf(yyparse_fp, "state stack is empty. abort.\n");
#endif
    return -1; /* yyparse return 1. */
  case 3: /* no shift yet, eat a token */
    if (yychar == YYEOF) return -1; /* yyparse() ABORT. */
#if YYDEBUG
    fprintf(yyparse_fp, "eat token %s\n", yyget_tok(yychar));
#endif
    /* discard lookahead, resume parsing. */
    yychar = -1; /* eat this token and read next symbol. */
    return 1; 
  default:
    YYERR_EXIT("yyerror_handler error: \
                 yyerrflag > 3 (should be 0~3)\n");
  } /* end of switch. */
} /* end of yyerror_handler(). */

/*
 * yyparse - return 0 if succeeds, 1 if anything goes wrong.
 */
int yyparse()
{
  YYSTYPE * yypvt;    /* top of value stack for $vars. */
  int yystate, yyaction = -1, yy_lhs, yy_rhs_ct, yyerr_hdl;
  yynerrs = yyerrflag = 0;

#if YYDEBUG
  if ((yyparse_fp = fopen(yyparse_file, "w")) == NULL) 
    YYERR_EXIT("yyparse error: cannot open file y.parse\n");
   
  if ((yypm = YYNEW(int)) == NULL) 
    YYERR_EXIT("yyparse error: out of memory\n");
  
  yypm_pt = 0;
#endif
  if ((yyps = YYNEW(int)) == NULL || (yypv = YYNEW(YYSTYPE)) == NULL) 
    YYERR_EXIT("yyparse error: out of memory\n");

  yyps_pt = yypv_pt = 0;

  * (yyps + yyps_pt) = 0; /* push 0 onto the state stack. */
  if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 

  yychar = -1; /* to allow reading the first symbol. */

  while (1) {
#if YYDEBUG
    yywrite_stack();
#endif

    if (yyaction >= 0 && yyfs[yyaction] < 0) {
      yyaction = yyfs[yyaction]; /* final state default reduce. */

    } else {
      if (yychar < 0) { /* we want to read next symbol. */
        yychar = yylex();
        if (yychar <= 0) yychar = YYEOF; /* end of file. */
#if YYDEBUG
        fprintf(yyparse_fp, "- read next symbol: %s\n", yyget_tok(yychar));
#endif
      }

      /* update current state: yystate. lookahead is yychar. */
      yystate = * (yyps + yyps_pt - 1);
      /* find action in parsing table. */
      YYGET_ACTION(yystate, yychar, yyaction);
#if YYDEBUG
      fprintf(yyparse_fp, "action at (%d, %s) is %d\n", 
              yystate, yyget_tok(yychar), yyaction);
#endif
    } /* end of else */


    if (yyaction > 0) { /* is shift */
      * (yyps + yyps_pt) = yyaction; /* push target state on state stack */
      if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 

      yyval = yylval; /* yylval is obtained from yylex(). */
      * (yypv + yypv_pt) = yyval; /* push value onto value stack. */
      yypv_pt ++;

#if YYDEBUG
      * (yypm + yypm_pt) = yychar;
      yypm_pt ++;
      fprintf(yyparse_fp, "- shift: state %d. \n", yyaction);
#endif

      yychar = -1; /* we want to read next symbol. */
      if (yyerrflag > 0) yyerrflag --; 

    } else if (yyaction == YYNOACTION) { /* no action found. error */
    yyerrlab: /* we have a user generated syntax type error */
      yyerr_hdl = yyerror_handler(yystate); 
      if (yyerr_hdl == -1) break; /* YYABORT; */
      else if (yyerr_hdl == 1) continue; /* eat a token. */

    } else if (yyaction < 0) { /* is reduction */
      yyaction = (-1) * yyaction; /* get reduction number. */
#if YYDEBUG
      fprintf(yyparse_fp, "- reduce: by rule %d. ", yyaction);
#endif

      yy_lhs = yyr1[yyaction]; /* lhs symbol. */
      yy_rhs_ct = yyr2[yyaction] >> 1; /* number of rhs symbols. */

      yypvt = yypv + yypv_pt - 1; /* top of value stack. */
      /* default: $$ = $1. $$ then can be changed by rule actions. */
      yyval = * (yypvt - yy_rhs_ct + 1);

      if ((yyr2[yyaction] & 1) == 1) { /* output associated code. */
        switch(yyaction) { 
          /*
 * Copyright (c) 2007, Xin Chen
 * All rights reserved. This file is distributed under BSD license.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY the copyright holder ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL the copyright holder BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * hyaccpar
 *
 * HYACC Parser engine.
 *
 * @Author: Xin Chen
 * @Created on: 1/30/2007
 * @Last modified: 10/27/2007
 * @Copyright (C) 2007
 */

#define YYLEX() yylex()

#define YYNOACTION -10000000 
#define YYEOF     0   /* for strEnd, input end marker. */
#define YYERRCODE 256 /* for use by "error" token. */

#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
#define YYRESUME return(0)
#define YYABORT return(1)
#define YYACCEPT return(0)
#define YYERROR goto yyerrlab
#define YYRECOVERING() (!!yyerrflag) /* !! */
#define YYMAX_STACK_CAPACITY 16384   /* 2^14 */
static int yystack_capacity = 256; /* initial stack capacity. */
#define YYNEW(type) (type *) malloc((yystack_capacity) * sizeof(type))
#define YYENLARGE(from, type) \
        (type *) realloc((void *) from, (yystack_capacity) * sizeof(type))
#define YYERR_EXIT(errmsg) { printf("%s\n", errmsg); exit(1); }

int yychar;     /* current input token number, i.e., lookahead. */
static FILE * yyparse_fp; /* output file to trace parse steps. */
static char * yyparse_file = "y.parse";
static int * yyps;     /* state stack. */
static int yyps_pt;    /* top of state stack: yyps+yyps_pt-1. */
YYSTYPE * yypv; /* value stack. */
static int yypv_pt;    /* top of value stack: yypv+yypv_pt-1. */
#if YYDEBUG
static int * yypm;     /* symbol stack. */
static int yypm_pt;    /* top of symbol stack: yypm+yypm_pt-1. */
#endif

int yynerrs;    /* number of errors */
int yyerrflag;  /* error recovery flag */

extern int yychar;
extern int yyerrflag;

YYSTYPE yylval; /* the value of yylval is from yylex. */
YYSTYPE yyval;  /* "$$" used in production action. */


#if YYDEBUG

/* get token name from value of yychar. */
static char * yyget_tok(const int yychar)
{
  static char c[1];
  int i;
  if (yychar == YYEOF) return "EOF";
  if (yychar == 256) return "error";
  if (yychar < 0) { /* search for non-terminal. */
    for (i = 0; yynts[i].t_val <= 0; i ++)  
      if (yychar == yynts[i].t_val) return yynts[i].t_name;
  }
  /* yychar > 256, search for terminal. */
  for (i = 0; yytoks[i].t_val >= 0; i ++) 
    if (yychar == yytoks[i].t_val) return yytoks[i].t_name;
  if (yychar > 0 && yychar < 256) { c[0] = yychar; return c; }
  
  return "-none-";
}

static void yywrite_stack(void)
{ 
  int i; 
  /* It's unknown what data type yypv is, so can't write here. */ 
  /* The user can customize the code here himself. */ 
  /* fprintf(yyparse_fp, "value stack: "); 
     for (i = 0; i < yypv_pt - 1; i ++) 
     fprintf(yyparse_fp, "%d, ", yypv[i]); 
     if (yypv_pt > 0) fprintf(yyparse_fp, "%d", yypv[i]); 
     fprintf(yyparse_fp, "\n"); 
  */

  fprintf(yyparse_fp, "symbol stack: ");
  for (i = 0; i < yypm_pt - 1; i ++)
    fprintf(yyparse_fp, "%s, ", yyget_tok(yypm[i]));
  if (yypm_pt > 0) fprintf(yyparse_fp, "%s", yyget_tok(yypm[i]));
  fprintf(yyparse_fp, "\n");
  
  fprintf(yyparse_fp, "state stack: "); 
  for (i = 0; i < yyps_pt - 1; i ++) 
    fprintf(yyparse_fp, "%d, ", yyps[i]); 
  if (yyps_pt > 0) fprintf(yyparse_fp, "%d", yyps[i]); 
  fprintf(yyparse_fp, "\n"); 
}

#define YYEXPAND_SYMBOL_STACK  \
    if ((yypm = YYENLARGE(yypm, int)) == NULL)  \
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");

#else
#define YYEXPAND_SYMBOL_STACK
#endif


#define YYEXPAND_STACK \
{ \
  if (yyps_pt >= YYMAX_STACK_CAPACITY) {				\
    printf("YYEXPAND_STACK error: YYMAX_STACK_CAPACITY reached.\n");	\
    exit(1);								\
  }									\
  if (yyps_pt >= yystack_capacity) {					\
    yystack_capacity *= 2;						\
    if ((yyps = YYENLARGE(yyps, int)) == NULL)				\
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");		\
    if ((yypv = YYENLARGE(yypv, YYSTYPE)) == NULL)			\
      YYERR_EXIT("YYEXPAND_STACK error: out of memory\n");		\
    YYEXPAND_SYMBOL_STACK						\
    /*printf("stack size expanded to %d\n", yystack_capacity); */	\
  }									\
}


/*
 * A macro to get an action from (state, token) pair in the
 * parsing table. Use macro instead of function to improve
 * performance.
 * Input: state, token
 * Output: action
 * if action > 0, then is a shift/goto target state.
 * if action < 0, then is the reduction rule number.
 * if action == 0, then is accept.
 * if action == YYNOACTION, then no action exists.
 */
#define YYGET_ACTION(state, token, action) \
{ \
  /* offset_h to (offset_t - 1) is the range to search. */	\
  int offset_h = yyrowoffset[state];				\
  int offset_t = yyrowoffset[state + 1];			\
								\
  /* now use linear search. Will change to binary search. */	\
  int offset;							\
  for (offset = offset_h; offset < offset_t; offset ++)		\
    if (yyptbltok[offset] == token) break;			\
								\
  if (offset == offset_t) action = YYNOACTION;			\
  else action = yyptblact[offset];				\
}


/*
 * Handles error when no action is found in yyparse().
 * state: yystate. lookahead: yychar.
 * return: 0 if success, -1 if fail, 1 if eat a token.
 */
static int yyerror_handler(int yystate)
{
  int yyaction;
  switch (yyerrflag) {
  case 0:
    yyerror("syntax error"); 
#if YYDEBUG
    fprintf(yyparse_fp, "syntax error: \
        no action exists for state/token pair (%d, %s).\n",
	    yystate, yyget_tok(yychar)); 
#endif
    goto skip_init;

  skip_init:
    yynerrs ++;
  case 1:
  case 2: /* incompletely recovered error */
    yyerrflag = 3; /* ! */
    /* find state where "error" is a legal shift action */
    while (yyps_pt > 0) { /* while state stack is not empty. */
#if YYDEBUG
      fprintf(yyparse_fp, 
	      "look for error action on state %d\n", yystate);
#endif
      YYGET_ACTION(yystate, YYERRCODE, yyaction);
      if (yyaction > 0) { /* shift on "error" found for yystate. */
	/* simulate shift for "error" token. */
	/* push target state on state stack. */
	* (yyps + yyps_pt) = yyaction; 
	if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 
	* (yypv + yypv_pt) = yyval; /* should not matter */
	yypv_pt ++;
#if YYDEBUG
	* (yypm + yypm_pt) = YYERRCODE;
	yypm_pt ++;
	fprintf(yyparse_fp, "- shift on error\n");
#endif
	return 0; /* return control to yyparse(), resume parsing. */
      } else {    /* no error shift action found, pop this state. */
#if YYDEBUG
	fprintf(yyparse_fp, 
		"- pop state %d\n", * (yyps + yyps_pt - 1));
#endif
	yyps_pt --; /* pop state stack. */
	yypv_pt --; /* pop value stack. */
#if YYDEBUG
	yypm_pt --;
	yywrite_stack();
#endif
	yystate = * (yyps + yyps_pt - 1); /* get current state. */
      }
    }
    /* the state stack is empty now, no error shift action found. */
#if YYDEBUG
    fprintf(yyparse_fp, "state stack is empty. abort.\n");
#endif
    return -1; /* yyparse return 1. */
  case 3: /* no shift yet, eat a token */
    if (yychar == YYEOF) return -1; /* yyparse() ABORT. */
#if YYDEBUG
    fprintf(yyparse_fp, "eat token %s\n", yyget_tok(yychar));
#endif
    /* discard lookahead, resume parsing. */
    yychar = -1; /* eat this token and read next symbol. */
    return 1; 
  default:
    YYERR_EXIT("yyerror_handler error: \
                 yyerrflag > 3 (should be 0~3)\n");
  } /* end of switch. */
} /* end of yyerror_handler(). */

/*
 * yyparse - return 0 if succeeds, 1 if anything goes wrong.
 */
int yyparse()
{
  YYSTYPE * yypvt;    /* top of value stack for $vars. */
  int yystate, yyaction = -1, yy_lhs, yy_rhs_ct, yyerr_hdl;
  yynerrs = yyerrflag = 0;

#if YYDEBUG
  if ((yyparse_fp = fopen(yyparse_file, "w")) == NULL) 
    YYERR_EXIT("yyparse error: cannot open file y.parse\n");
   
  if ((yypm = YYNEW(int)) == NULL) 
    YYERR_EXIT("yyparse error: out of memory\n");
  
  yypm_pt = 0;
#endif
  if ((yyps = YYNEW(int)) == NULL || (yypv = YYNEW(YYSTYPE)) == NULL) 
    YYERR_EXIT("yyparse error: out of memory\n");

  yyps_pt = yypv_pt = 0;

  * (yyps + yyps_pt) = 0; /* push 0 onto the state stack. */
  if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 

  yychar = -1; /* to allow reading the first symbol. */

  while (1) {
#if YYDEBUG
    yywrite_stack();
#endif

    if (yyaction >= 0 && yyfs[yyaction] < 0) {
      yyaction = yyfs[yyaction]; /* final state default reduce. */

    } else {
      if (yychar < 0) { /* we want to read next symbol. */
        yychar = yylex();
        if (yychar <= 0) yychar = YYEOF; /* end of file. */
#if YYDEBUG
        fprintf(yyparse_fp, "- read next symbol: %s\n", yyget_tok(yychar));
#endif
      }

      /* update current state: yystate. lookahead is yychar. */
      yystate = * (yyps + yyps_pt - 1);
      /* find action in parsing table. */
      YYGET_ACTION(yystate, yychar, yyaction);
#if YYDEBUG
      fprintf(yyparse_fp, "action at (%d, %s) is %d\n", 
              yystate, yyget_tok(yychar), yyaction);
#endif
    } /* end of else */


    if (yyaction > 0) { /* is shift */
      * (yyps + yyps_pt) = yyaction; /* push target state on state stack */
      if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 

      yyval = yylval; /* yylval is obtained from yylex(). */
      * (yypv + yypv_pt) = yyval; /* push value onto value stack. */
      yypv_pt ++;

#if YYDEBUG
      * (yypm + yypm_pt) = yychar;
      yypm_pt ++;
      fprintf(yyparse_fp, "- shift: state %d. \n", yyaction);
#endif

      yychar = -1; /* we want to read next symbol. */
      if (yyerrflag > 0) yyerrflag --; 

    } else if (yyaction == YYNOACTION) { /* no action found. error */
    yyerrlab: /* we have a user generated syntax type error */
      yyerr_hdl = yyerror_handler(yystate); 
      if (yyerr_hdl == -1) break; /* YYABORT; */
      else if (yyerr_hdl == 1) continue; /* eat a token. */

    } else if (yyaction < 0) { /* is reduction */
      yyaction = (-1) * yyaction; /* get reduction number. */
#if YYDEBUG
      fprintf(yyparse_fp, "- reduce: by rule %d. ", yyaction);
#endif

      yy_lhs = yyr1[yyaction]; /* lhs symbol. */
      yy_rhs_ct = yyr2[yyaction] >> 1; /* number of rhs symbols. */

      yypvt = yypv + yypv_pt - 1; /* top of value stack. */
      /* default: $$ = $1. $$ then can be changed by rule actions. */
      yyval = * (yypvt - yy_rhs_ct + 1);

      if ((yyr2[yyaction] & 1) == 1) { /* output associated code. */
        switch(yyaction) { 
          $
	    }
      } 

      yyps_pt -= yy_rhs_ct; /* pop yy_rhs_ct states from state stack. */
      yystate = * (yyps + yyps_pt -1); /* get current state. */
      YYGET_ACTION(yystate, yy_lhs, yyaction); /* get goto state. */
      if (yyaction == YYNOACTION) {
        YYERR_EXIT("yyparse symbol table error: goto state not found\n");
      }
      * (yyps + yyps_pt) = yyaction; /* push goto state onto stack. */
      if (++ yyps_pt == yystack_capacity) YYEXPAND_STACK; 

      /* push new value of $$ (yyval) onto value stack. */
      yypv_pt -= yy_rhs_ct;
      * (yypv + yypv_pt) = yyval;
      yypv_pt ++;

#if YYDEBUG
      yypm_pt -= yy_rhs_ct;
      * (yypm + yypm_pt) = yy_lhs;
      yypm_pt ++;

      fprintf(yyparse_fp, "after reduction: goto state=%d, lookahead=%s\n",
	      * (yyps + yyps_pt - 1), yyget_tok(yychar));
#endif

    } else if (yyaction == 0) { /* is accept */
      if (yychar == YYEOF) {
#if YYDEBUG
        fprintf(yyparse_fp, "- valid accept\n");
#endif
        break; /* break out of while loop. */
      }
      else { /* this should not happen, since acc happens only on $. */
        yyerror("yyparse symbol table error: accept not on end marker");
#if YYDEBUG
        fprintf(yyparse_fp, "invalid accept. next lookahead is: %s\n",
                yyget_tok(yychar));
#endif
        YYABORT;
      } 
    }
  } /* end of while(1). */

#if YYDEBUG
  fclose(yyparse_fp);
  free(yypm);
#endif
  free(yyps);
  free(yypv);

  if (yyerr_hdl == -1) YYABORT;
  else YYACCEPT;
} /* end of yyparse */
